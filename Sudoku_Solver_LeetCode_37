class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    private boolean solve(char[][] board) {
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if(board[i][j] == '.') {
                    for(char c = '1'; c <= '9'; c++) {
                        if(isValid(c, i, j, board)) {
                            board[i][j] = c;
                            if(solve(board)) {
                                return true;
                            } else {
                                board[i][j] = '.'; // backtrack
                            }
                        }
                    }
                    return false; // no valid number found
                }
            }
        }
        return true; // board is complete
    }

    public boolean isValid(char c, int row, int col, char[][] board) {
        for(int i = 0; i < 9; i++) {
            if(board[row][i] == c) return false; // check row
            if(board[i][col] == c) return false; // check column
            if(board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; // check 3x3 box
        }
        return true;
    }
}
