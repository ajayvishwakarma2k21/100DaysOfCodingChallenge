import java.util.Arrays;

class Solution {
    public int[] JobScheduling(int[][] Jobs) {
        // Assuming Jobs[i] = {id, deadline, profit}

        // 1. Sort jobs by profit in descending order.
        // If profits are equal, sorting by deadline in descending order can sometimes
        // be beneficial, but for correctness, just profit is enough for this greedy approach.
        Arrays.sort(Jobs, (a, b) -> (b[2] - a[2])); // Sort by profit (index 2)

        // 2. Find the maximum deadline to determine the size of the time slot array.
        int maxDeadline = 0;
        for (int i = 0; i < Jobs.length; i++) {
            if (Jobs[i][1] > maxDeadline) { // Jobs[i][1] is the deadline
                maxDeadline = Jobs[i][1];
            }
        }

        // 3. Create a time slot array.
        // Each index represents a time slot.
        // `timeSlots[t]` stores the job ID scheduled at time `t`, or 0 if free.
        // We initialize with 0, as 0 can signify an empty slot (assuming job IDs are positive).
        // Or, more robustly, use -1 if job IDs can be 0 or positive.
        // Let's use -1 to be clear.
        int[] timeSlots = new int[maxDeadline + 1];
        Arrays.fill(timeSlots, -1); // -1 means the time slot is free

        int countJobs = 0;
        int totalProfit = 0;

        // 4. Iterate through sorted jobs and try to schedule them.
        for (int i = 0; i < Jobs.length; i++) {
            int currentJobId = Jobs[i][0];
            int currentJobDeadline = Jobs[i][1];
            int currentJobProfit = Jobs[i][2];

            // Try to find a free slot for the current job, starting from its deadline
            // and going backwards to time slot 1 (or 0 if time slots are 0-indexed).
            // We iterate from deadline downwards because we want to keep earlier slots free
            // for jobs with smaller deadlines.
            for (int j = currentJobDeadline; j >= 1; j--) { // Time slots usually start from 1
                if (timeSlots[j] == -1) { // If the slot is free
                    timeSlots[j] = currentJobId; // Schedule the job
                    countJobs++;
                    totalProfit += currentJobProfit;
                    break; // Job scheduled, move to the next job
                }
            }
        }

        int[] result = new int[2];
        result[0] = countJobs;
        result[1] = totalProfit;
        return result;
    }
}
