/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> set = new HashSet<>();
        while(headA != null){
          set.add(headA);
          headA = headA.next;
        }
        while(headB != null){
          if(set.contains(headB)){
            return headB;
          }
          headB = headB.next;
        }
        return null;
    }
}


// using concept of cycle..
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode a = headA, b = headB;
        while(a != b){
          a = a.next;
          b = b.next;
          if(a==b){
            return a;
          }
          if(a== null){
            a=headB;
          }
          if(b== null){
            b=headA;
          }
        }
        return a;
    }
}
