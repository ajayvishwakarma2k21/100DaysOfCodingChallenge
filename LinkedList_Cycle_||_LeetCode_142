/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        HashSet<ListNode> set = new HashSet<>();
        while(head != null){
          if(set.contains(head)){
            return head;
          }
          set.add(head);
          head = head.next;
        }
        return null;
    }
}


2. using slow and fast 
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
          slow = slow.next;
          fast = fast.next.next;
          if(slow == fast){
            break;
          }
        }
        if(fast== null || fast.next == null){
          return null;// no cycle in the list.
        }
        slow = head;
        while(slow != fast){
          slow = slow.next;
          fast = fast.next;
        }
        return fast;
    }
}
