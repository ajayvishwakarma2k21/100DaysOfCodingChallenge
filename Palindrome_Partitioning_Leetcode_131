class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans  = new ArrayList<>();
        solve(0, s, ans, new ArrayList<String>());
        return ans;
    }
    public void solve(int index, String s, List<List<String>> ans, ArrayList<String> temp){
      if(index == s.length()){
        ans.add(new ArrayList<>(temp));
        return;
      }
      for(int i = index; i< s.length(); i++){
        if(isPalindrome(s, index, i)){
          temp.add(s.substring(index, i + 1));
          solve(i +1, s, ans, temp);// calling the next partion.
          temp.remove(temp.size() -1);// ye backtrak ke liye he. ye nhi kiya to new combination nhi bn payega
        }
      }
    }
    public boolean isPalindrome(String s, int start, int end){
      while(start < end){
        if(s.charAt(start)!=s.charAt(end)){
          return false;
        }
        start++;
        end--;
      }
      return true;
    }
}
