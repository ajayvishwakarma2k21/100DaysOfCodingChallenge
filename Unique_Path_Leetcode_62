//solution 1 --> Dynamic Programming ( BackTraking).
class Solution {
    public int backtrack(int r  , int c  , int m  , int  n,int [][] memo){
           if(r==m-1 && c== n-1) return 1;
           if(r>=m ||c>=n) return 0;
           if(memo[r][c]!=-1) return memo[r][c];
           int ll  = backtrack(r+1,c,m,n,memo);
          int  rr  = backtrack(r,c+1,m,n,memo);
           memo[r][c]=  ll+rr;
           return memo[r][c];
    }
    public int uniquePaths(int m, int n) {
        int[][] memo  = new int[m][n];
        for(int []  row  :  memo) Arrays.fill(row,-1);
         return backtrack(0,0,m,n,memo);
    }
}

// solution 2 --> combinations

class Solution {
    public int uniquePaths(int m, int n) {
        int N = m + n -2;
        int r = m - 1;
        double res = 1;
        for(int i = 1 ; i <= r; i++){
          res = res * (N - r + i) / i;
        }
        return (int)res;
    }
}
