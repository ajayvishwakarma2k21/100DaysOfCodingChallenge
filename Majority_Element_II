// 2 Solutions

// using Tracks of element --> maximum two elements are possible which have count > n / 3
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int count1 = 0, count2 = 0;
        int candidate1 = -1, candidate2 = -1;

        List<Integer> list = new ArrayList<>();

        for(int num : nums) {
            if(num == candidate1) {
                count1++;
            } else if(num == candidate2) {
                count2++;
            } else if(count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if(count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        count1 = 0;
        count2 = 0;

        for(int num : nums) {
              if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        if(count1 > nums.length/3) list.add(candidate1);
        if(count2 > nums.length/3) list.add(candidate2);

        return list;
    }
}


// using Hashing 
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        Map<Integer, Integer> mp = new HashMap<>();

        for(int i : nums){
          if(mp.containsKey(i)){
            mp.put(i, mp.get(i)+1);
          }else{
            mp.put(i, 1);
          }
        }

        for(Map.Entry<Integer, Integer> e : mp.entrySet()){
          if(e.getValue()>nums.length/3){
            ans.add(e.getKey());
          }
        }
        return ans;
    }
}
