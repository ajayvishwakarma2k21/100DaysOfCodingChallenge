class meeting {
  int start;
  int end;
  int pos;

  meeting(int start, int end, int pos) {
    this.start = start;
    this.end = end;
    this.pos = pos;
  }
}

class MeetingComparator implements Comparator<meeting> {
  @Override
  public int compare(meeting o1, meeting o2) {
    if (o1.end < o2.end) {
      return -1;
    } else if (o1.end > o2.end) {
      return 1;
    } else if (o1.pos < o2.pos) {
      return -1;
    }
    return 1;
  }
}

class Solution {
  public int maxMeetings(int[] start, int[] end) {
    ArrayList<meeting> ls = new ArrayList<>();

    for(int i = 0; i<start.length; i++){
        ls.add(new meeting(start[i], end[i], i + 1));
    }

    MeetingComparator mc = new MeetingComparator();
    Collections.sort(ls, mc);

    int limit = ls.get(0).end;
    int ans = 1;

    for(int i = 1; i< start.length; i++){
        if(ls.get(i).start > limit){
            ans++;
            limit = ls.get(i).end;
        }
    }
    return ans;
  }
}
